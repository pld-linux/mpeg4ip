--- mpeg4ip-1.0/player/plugin/video/xvid/ourxvid.cpp.orig	2003-11-20 22:57:14.000000000 +0100
+++ mpeg4ip-1.0/player/plugin/video/xvid/ourxvid.cpp	2004-02-10 00:39:58.591680264 +0100
@@ -113,13 +113,14 @@
 	       aspect_ratio, aspect_ratio_w, aspect_ratio_h);
   // Get the VO/VOL header.  If we fail, set the bytestream back
   ret = 0;
-  XVID_DEC_PARAM param;
+  xvid_dec_create_t param;
+  param.version = XVID_VERSION;
   param.width = width;
   param.height = height;
 
   ret = xvid_decore(NULL, XVID_DEC_CREATE,
 		    &param, NULL);
-  if (ret == XVID_ERR_OK) {
+  if (ret == 0) {
     double ar = 0.0;
     switch (aspect_ratio) {
     default:
@@ -158,10 +159,12 @@
 				 ar);
   }
   // we need to then run the VOL through the decoder.
-  XVID_DEC_FRAME frame;
+  xvid_dec_frame_t frame;
+  frame.version = XVID_VERSION;
+  frame.general = 0;
   frame.bitstream = (void *)volptr;
   frame.length = vollen;
-  frame.colorspace = XVID_CSP_USER;
+  frame.output.csp = XVID_CSP_USER;
   xvid_decore(xvid->m_xvid_handle, XVID_DEC_DECODE, &frame, NULL);
   
   return ret;
@@ -185,18 +188,19 @@
   xvid->m_vft = vft;
   xvid->m_ifptr = ifptr;
 
-  XVID_INIT_PARAM xvid_param;
+  xvid_gbl_init_t xvid_param;
+  xvid_param.version = XVID_VERSION;
   xvid_param.cpu_flags = 0;
-  xvid_init(NULL, 0, &xvid_param, NULL);
+  xvid_global(NULL, XVID_GBL_INIT, &xvid_param, NULL);
 
   xvid->m_decodeState = XVID_STATE_VO_SEARCH;
   if (media_fmt != NULL && media_fmt->fmt_param != NULL) {
     // See if we can decode a passed in vovod header
-    if (parse_vovod(xvid, media_fmt->fmt_param, 1, 0) == XVID_ERR_OK) {
+    if (parse_vovod(xvid, media_fmt->fmt_param, 1, 0) == 0) {
       xvid->m_decodeState = XVID_STATE_WAIT_I;
     }
   } else if (userdata != NULL) {
-    if (parse_vovod(xvid, (char *)userdata, 0, ud_size) == XVID_ERR_OK) {
+    if (parse_vovod(xvid, (char *)userdata, 0, ud_size) == 0) {
       xvid->m_decodeState = XVID_STATE_WAIT_I;
     }
   } 
@@ -285,7 +289,8 @@
   int ret;
   int do_wait_i = 0;
   xvid_codec_t *xvid = (xvid_codec_t *)ptr;
-  XVID_DEC_FRAME frame;
+  xvid_dec_frame_t frame;
+  frame.version = XVID_VERSION;
 
 #if 0
   xvid->m_vft->log_msg(LOG_DEBUG, "xvid", " %d frame %llu len %u %d", 
@@ -305,9 +310,7 @@
   
   frame.bitstream = buffer;
   frame.length = buflen;
-  frame.colorspace = XVID_CSP_USER;
-  XVID_DEC_PICTURE decpict;
-  frame.image = &decpict;
+  frame.output.csp = XVID_CSP_USER;
 
   ret = xvid_decore(xvid->m_xvid_handle, XVID_DEC_DECODE, &frame, NULL);
   if (xvid->m_decodeState == XVID_STATE_VO_SEARCH) {
@@ -319,13 +322,13 @@
     xvid->m_decodeState = XVID_STATE_NORMAL;
   }
 
-  if (ret == XVID_ERR_OK) {
+  if (ret == 0) {
     xvid->m_vft->video_have_frame(xvid->m_ifptr,
-				  (const uint8_t *)decpict.y,
-				  (const uint8_t *)decpict.u,
-				  (const uint8_t *)decpict.v,
-				  decpict.stride_y,
-				  decpict.stride_u,
+				  (const uint8_t *)frame.output.plane[0],
+				  (const uint8_t *)frame.output.plane[1],
+				  (const uint8_t *)frame.output.plane[2],
+				  frame.output.stride[0],
+				  frame.output.stride[1],
 				  ts);
     ret = frame.length;
   } else {
--- mpeg4ip-1.0/player/plugin/video/xvid/xvid_file.cpp.orig	2003-12-04 23:49:33.000000000 +0100
+++ mpeg4ip-1.0/player/plugin/video/xvid/xvid_file.cpp	2004-02-10 00:42:14.888959928 +0100
@@ -188,7 +188,8 @@
   xvid_codec_t *xvid;
   uint32_t framecount = 0;
   uint64_t calc;
-  XVID_INIT_PARAM xvid_param;
+  xvid_gbl_init_t xvid_param;
+  xvid_param.version = XVID_VERSION;
 
   /*
    * Compare with .xvid extension
@@ -207,7 +208,7 @@
   memset(xvid, 0, sizeof(*xvid));
   
   xvid_param.cpu_flags = 0;
-  xvid_init(NULL, 0, &xvid_param, NULL);
+  xvid_global(NULL, XVID_GBL_INIT, &xvid_param, NULL);
 
   xvid->m_decodeState = XVID_STATE_VO_SEARCH;
 
@@ -253,7 +254,8 @@
 	return NULL;
       }
 
-      XVID_DEC_PARAM param;
+      xvid_dec_create_t param;
+      param.version = XVID_VERSION;
       param.width = width;
       param.height = height;
       xvid->m_width = width;
@@ -262,7 +264,7 @@
 			    XVID_DEC_CREATE,
 			    &param,
 			    NULL);
-      if (ret == XVID_ERR_OK) {
+      if (ret == 0) {
 	havevol = 1;
 	message(LOG_DEBUG, "xvid", "Found vol in xvid file");
 	// we really need the frames per second from the timestamps...
--- mpeg4ip-1.0/server/util/xvidenc/xvidenc.c.orig	2003-10-16 23:31:50.000000000 +0200
+++ mpeg4ip-1.0/server/util/xvidenc/xvidenc.c	2004-02-10 20:41:33.862533152 +0100
@@ -64,13 +64,15 @@
   char* mpeg4FileName = NULL;
   FILE* rawFile = NULL;
   FILE* mpeg4File = NULL;
-  XVID_INIT_PARAM xvidInitParams;
-  XVID_ENC_PARAM xvidEncParams;
-  XVID_ENC_FRAME xvidFrame;
+  xvid_gbl_init_t xvidInitParams;
+  xvid_gbl_info_t xvidInitInfo;
+  xvid_enc_create_t xvidEncParams;
+  xvid_enc_frame_t xvidFrame;
 #ifdef HAVE_XVID_H
-  XVID_DEC_PICTURE decpict;
+  xvid_enc_plugin_t encplugin;
+  xvid_plugin_single_t encpluginparams;
 #endif
-  XVID_ENC_STATS xvidResult;
+  xvid_enc_stats_t xvidResult;
   void *xvidHandle;
   u_int32_t yuvSize, ySize;
   u_int8_t encVopBuffer[128 * 1024];
@@ -80,7 +82,8 @@
   uint8_t *readbuffer;
 
   memset(&xvidInitParams, 0, sizeof(xvidInitParams));
-  if (xvid_init(NULL, 0, &xvidInitParams, NULL) != XVID_ERR_OK) {
+  xvidInitParams.version = XVID_VERSION;
+  if (xvid_global(NULL, XVID_GBL_INIT, &xvidInitParams, NULL) != 0) {
     fprintf(stderr, "%s: failed to initialize xvid\n", progName);
     exit(5);
   }
@@ -174,9 +177,11 @@
       break;
     }
     case 'v':
+      memset(&xvidInitInfo, 0, sizeof(xvidInitInfo));
+      xvidInitInfo.version = XVID_VERSION;
+      xvid_global(NULL, XVID_GBL_INFO, &xvidInitInfo, NULL);
       fprintf(stdout, "mpeg4ip version %s\n", VERSION);
-      fprintf(stdout, "xvid api version %d\n", xvidInitParams.api_version);
-      fprintf(stdout, "xvid core build %d\n", xvidInitParams.core_build);
+      fprintf(stdout, "xvid version %d\n", xvidInitInfo.actual_version);
       exit(0);
 
     default:
@@ -230,22 +235,30 @@
     exit(4);
   }
   memset(&xvidEncParams, 0, sizeof(xvidEncParams));
+  xvidEncParams.version = XVID_VERSION;
   xvidEncParams.width = frameWidth;
   xvidEncParams.height = frameHeight;
   xvidEncParams.fincr = 1;
   xvidEncParams.fbase = (int)(frameRate + 0.5);
 #ifdef HAVE_XVID_H
-  xvidEncParams.rc_bitrate = bitRate;
+  xvidEncParams.num_plugins = 1;
+  xvidEncParams.plugins = &encplugin;
+  memset(&encplugin, 0, sizeof(encplugin));
+  encplugin.func = xvid_plugin_single;
+  encplugin.param = &encpluginparams;
+  memset(&encpluginparams, 0, sizeof(encpluginparams));
+  encpluginparams.version = XVID_VERSION;
+  encpluginparams.bitrate = bitRate;
 #else
   xvidEncParams.bitrate = bitRate;
   xvidEncParams.rc_buffersize = 16;
 #endif
-  xvidEncParams.min_quantizer = 1;
-  xvidEncParams.max_quantizer = 31;
+  xvidEncParams.min_quant[0] = 1;
+  xvidEncParams.max_quant[0] = 31;
   xvidEncParams.max_key_interval = iFrameFrequency;
   if (xvidEncParams.max_key_interval == 0) 
     xvidEncParams.max_key_interval = 1;
-  if (xvid_encore(NULL, XVID_ENC_CREATE, &xvidEncParams, NULL) != XVID_ERR_OK) {
+  if (xvid_encore(NULL, XVID_ENC_CREATE, &xvidEncParams, NULL) != 0) {
     fprintf(stderr, "%s: failed to initialize xvid encoder params\n",
 	    progName);
     exit(6);
@@ -253,12 +266,11 @@
   xvidHandle = xvidEncParams.handle;
   memset(&xvidFrame, 0, sizeof(xvidFrame));
 
-  xvidFrame.general = XVID_HALFPEL | XVID_H263QUANT;
+  xvidFrame.version = XVID_VERSION;
+  xvidFrame.vop_flags = XVID_VOP_HALFPEL | XVID_VOP_INTER4V; /* | XVID_H263QUANT; */
   xvidFrame.motion = 
-    PMV_EARLYSTOP16 | PMV_HALFPELREFINE16 
-    | PMV_EARLYSTOP8 | PMV_HALFPELDIAMOND8;
-
-  xvidFrame.general |= XVID_INTER4V;
+    XVID_ME_BFRAME_EARLYSTOP | XVID_ME_HALFPELREFINE16 |
+    XVID_ME_ADVANCEDDIAMOND8;
   xvidFrame.quant = 0;
 
   ySize = frameWidth * frameHeight;
@@ -272,13 +284,12 @@
   xvidFrame.image_v = xvidFrame.image_u + ySize / 4;
   xvidFrame.stride = frameWidth;
 #else
-  decpict.y = readbuffer;
-  decpict.u = decpict.y + ySize;
-  decpict.v = decpict.u + ySize / 4;
-  decpict.stride_y = frameWidth;
-  decpict.stride_u = frameWidth / 2;
-  xvidFrame.image = &decpict;
-  xvidFrame.colorspace = XVID_CSP_USER;
+  xvidFrame.input.plane[0] = readbuffer;
+  xvidFrame.input.plane[1] = readbuffer + ySize;
+  xvidFrame.input.plane[2] = readbuffer + ySize + ySize / 4;
+  xvidFrame.input.stride[0] = frameWidth;
+  xvidFrame.input.stride[1] = frameWidth / 2;
+  xvidFrame.input.csp = XVID_CSP_USER;
 #endif
   
   startTime = time(0);
@@ -307,18 +318,12 @@
     }
 
     xvidFrame.bitstream = encVopBuffer;
-    xvidFrame.intra = -1;
+    /* xvidFrame.intra = -1; */
     //		encFrame.length = sizeof(encVopBuffer);
 
     /* call xvid encoder */
     rc = xvid_encore(xvidHandle, XVID_ENC_ENCODE, &xvidFrame, &xvidResult);
 
-    if (rc != XVID_ERR_OK) {
-      fprintf(stderr, 
-	      "%s: encode error %s: unknown error %d\n",
-	      progName, mpeg4FileName, rc);
-    }
-
     /* write results to output file */
     if (frameNumber == 1 &&
 	encVopBuffer[3] != MP4AV_MPEG4_VOSH_START) {
--- mpeg4ip-1.0/server/mp4live/video_xvid.h.orig	2003-04-24 00:59:23.000000000 +0200
+++ mpeg4ip-1.0/server/mp4live/video_xvid.h	2004-02-10 22:01:53.045905920 +0100
@@ -52,8 +52,8 @@
 	void*				m_xvidHandle;
 	u_int8_t*			m_vopBuffer;
 	u_int32_t			m_vopBufferLength;
-	XVID_ENC_FRAME 		m_xvidFrame;
-	XVID_ENC_STATS		m_xvidResult;
+	xvid_enc_frame_t 		m_xvidFrame;
+	xvid_enc_stats_t		m_xvidResult;
 };
 
 #endif /* __VIDEO_XVID_H__ */
--- mpeg4ip-1.0/server/mp4live/video_xvid.cpp.orig	2003-10-14 19:09:06.000000000 +0200
+++ mpeg4ip-1.0/server/mp4live/video_xvid.cpp	2004-02-10 22:19:01.533552032 +0100
@@ -33,18 +33,20 @@
 {
 	m_pConfig = pConfig;
 
-	XVID_INIT_PARAM xvidInitParams;
+	xvid_gbl_init_t xvidInitParams;
 
 	memset(&xvidInitParams, 0, sizeof(xvidInitParams));
+	xvidInitParams.version = XVID_VERSION;
 
-	if (xvid_init(NULL, 0, &xvidInitParams, NULL) != XVID_ERR_OK) {
+	if (xvid_global(NULL, XVID_GBL_INIT, &xvidInitParams, NULL) != 0) {
 		error_message("Failed to initialize Xvid");
 		return false;
 	}
 
-	XVID_ENC_PARAM xvidEncParams;
+	xvid_enc_create_t xvidEncParams;
 
 	memset(&xvidEncParams, 0, sizeof(xvidEncParams));
+	xvidEncParams.version = XVID_VERSION;
 
 	xvidEncParams.width = m_pConfig->m_videoWidth;
 	xvidEncParams.height = m_pConfig->m_videoHeight;
@@ -71,11 +73,22 @@
 		m_pConfig->GetIntegerValue(CONFIG_VIDEO_BIT_RATE) * 1000;
 	xvidEncParams.rc_buffersize = 16;
 #else
-	xvidEncParams.rc_bitrate = 
+	xvid_plugin_single_t encsingleplugin;
+	memset(&encsingleplugin, 0, sizeof(encsingleplugin));
+	encsingleplugin.version = XVID_VERSION;
+	encsingleplugin.bitrate = 
 		m_pConfig->GetIntegerValue(CONFIG_VIDEO_BIT_RATE) * 1000;
+
+	xvid_enc_plugin_t encplugin;
+	memset(&encplugin, 0, sizeof(encplugin));
+	encplugin.func = xvid_plugin_single;
+	encplugin.param = &encsingleplugin;
+
+	xvidEncParams.num_plugins = 1;
+	xvidEncParams.plugins = &encplugin;
 #endif
-	xvidEncParams.min_quantizer = 1;
-	xvidEncParams.max_quantizer = 31;
+	xvidEncParams.min_quant[0] = 1;
+	xvidEncParams.max_quant[0] = 31;
 	xvidEncParams.max_key_interval = (int)
 		(m_pConfig->GetFloatValue(CONFIG_VIDEO_FRAME_RATE) 
 		 * m_pConfig->GetFloatValue(CONFIG_VIDEO_KEY_FRAME_INTERVAL));
@@ -84,7 +97,7 @@
 	} 
 
 	if (xvid_encore(NULL, XVID_ENC_CREATE, &xvidEncParams, NULL) 
-	  != XVID_ERR_OK) {
+	  != 0) {
 		error_message("Failed to initialize Xvid encoder");
 		return false;
 	}
@@ -93,18 +106,18 @@
 
 	memset(&m_xvidFrame, 0, sizeof(m_xvidFrame));
 
-	m_xvidFrame.general = XVID_HALFPEL | XVID_H263QUANT;
+	m_xvidFrame.vop_flags = XVID_VOP_HALFPEL /*| XVID_H263QUANT */;
 	if (!realTime) {
 		m_xvidFrame.motion = 
-			PMV_EARLYSTOP16 | PMV_HALFPELREFINE16 
-			| PMV_EARLYSTOP8 | PMV_HALFPELDIAMOND8;
+			XVID_ME_BFRAME_EARLYSTOP | XVID_ME_HALFPELREFINE16 
+			| XVID_ME_ADVANCEDDIAMOND8;
 	} else {
-		m_xvidFrame.motion = PMV_QUICKSTOP16;
+		m_xvidFrame.motion = /*PMV_QUICKSTOP16*/ 0;
 	}
 		if (!realTime) {
-			m_xvidFrame.general |= XVID_INTER4V;
+			m_xvidFrame.vop_flags |= XVID_VOP_INTER4V;
 		}
-	m_xvidFrame.colorspace = XVID_CSP_I420;
+	m_xvidFrame.input.csp= XVID_CSP_I420;
 	m_xvidFrame.quant = 0;
 
 	return true;
@@ -130,24 +143,18 @@
 	m_xvidFrame.image_v = pV;
 	m_xvidFrame.stride = yStride;
 #else
-	XVID_DEC_PICTURE decpict;
-	decpict.y = pY;
-	decpict.u = pU;
-	decpict.v = pV;
-	decpict.stride_y = yStride;
-	decpict.stride_u = uvStride;
-	m_xvidFrame.image = &decpict;
-	m_xvidFrame.colorspace = XVID_CSP_USER;
+	m_xvidFrame.input.plane[0] = pY;
+	m_xvidFrame.input.plane[1] = pU;
+	m_xvidFrame.input.plane[2] = pV;
+	m_xvidFrame.input.stride[0] = yStride;
+	m_xvidFrame.input.stride[1] = uvStride;
+	m_xvidFrame.input.csp = XVID_CSP_USER;
 #endif
 	m_xvidFrame.bitstream = m_vopBuffer;
-	m_xvidFrame.intra = (wantKeyFrame ? 1 : -1);
+	/* m_xvidFrame.intra = (wantKeyFrame ? 1 : -1); */
 
-	if (xvid_encore(m_xvidHandle, XVID_ENC_ENCODE, &m_xvidFrame, 
-	  &m_xvidResult) != XVID_ERR_OK) {
-		debug_message("Xvid can't encode frame!");
-		CHECK_AND_FREE(m_vopBuffer);
-		return false;
-	}
+	xvid_encore(m_xvidHandle, XVID_ENC_ENCODE, &m_xvidFrame, 
+	  &m_xvidResult);
 
 	m_vopBufferLength = m_xvidFrame.length;
 
--- mpeg4ip-1.0/lib/Makefile.am.orig	2004-02-10 00:49:02.000000000 +0100
+++ mpeg4ip-1.0/lib/Makefile.am	2004-02-10 08:13:02.267133448 +0100
@@ -1 +1,7 @@
-SUBDIRS = avi bitstream config_file fposrec gnu mp4 mp4v2 mp4av msg_queue rtp sdp xvid mpeg2t
+if USE_MPEG4IP_XVID
+XVID_DIR=xvid
+else
+XVID_DIR=
+endif
+
+SUBDIRS = avi bitstream config_file fposrec gnu mp4 mp4v2 mp4av msg_queue rtp sdp mpeg2t $(XVID_DIR)
